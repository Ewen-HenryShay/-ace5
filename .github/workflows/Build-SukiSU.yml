name: Build OnePlus_Kernel

on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支"
        required: true
        default: 'sm8650'
      FEIL:
        description: "配置文件"
        required: true
        default: 'oneplus_ace5'
      CPUD:
        description: "处理器代号"
        required: true
        default: 'pineapple'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        default: 'android14'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        default: '6.1'
      KERNEL_NAME:
        description: "修改内核名称"
        required: true
        default: '-android14-11-o-g1132d864665d'
      kernelsu_variant:
        description: "选择 KSU"
        required: true
        type: choice
        options:
          - Kernel
          - SukiSU
        default: SukiSU
      kernelsu_version:
        description: "选择 KSU 版本"
        required: true
        type: choice
        options:
          - without ksu
          - tag
          - main
        default: main
      SUSFS_ENABLED:
        description: "添加 SUSFS"
        required: true
        type: boolean
        default: true
      VFS_patch_ENABLED:
        description: "添加vfs补丁（新钩子）？"
        required: true
        type: choice
        options:
          - enable
          - disable
        default: enable
  schedule:
    - cron: '0 23 * * *'  # UTC时间23点（北京时间次日7点）

env:
  RETENTION_COUNT: 7  # 保留的发布版本数量

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Configure Git
        run: |
          git config --global user.name "ychenxuan"
          git config --global user.email "3494167979@qq.com"

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl

      - name: Install repo tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ inputs.CPU }} -m ${{ inputs.FEIL }}.xml --depth=1
          repo sync
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          sed -i 's/ -dirty//g' kernel_platform/common/scripts/setlocalversion
          sed -i 's/ -dirty//g' kernel_platform/msm-kernel/scripts/setlocalversion
      
      - name: KernelSU & SukiSU version
        if: ${{ inputs.kernelsu_variant == 'SukiSU' }}
        run: |
          if [[ "${{ inputs.kernelsu_version }}" == "tag" ]]; then
            echo "BRANCH=-" >> $GITHUB_ENV
          elif [[ "${{ inputs.kernelsu_version }}" == "main" ]]; then
            echo "BRANCH=-s susfs-dev" >> $GITHUB_ENV
          fi
          
      - name: Add KernelSU-SukiSU
        if: ${{ inputs.kernelsu_variant == 'SukiSU' }}
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/KernelSU/main/kernel/setup.sh" | bash ${{ env.BRANCH }}
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 10506)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          
      - name: Apply SUSFS Patches SukiSU
        if: ${{ inputs.kernelsu_variant == 'SukiSU' && inputs.SUSFS_ENABLED == 'true' }}
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd kernel_platform

          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          echo "正在给内核打susfs补丁"
          cd ./common
          patch -p1 < 50_add_susfs_in_gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}.patch || true
          echo "完成"
          
      - name: Apply Hide Stuff Patches
        if: ${{ inputs.SUSFS_ENABLED == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "正在打隐藏应用补丁"
          patch -p1 -F 3 < 69_hide_stuff.patch
         
      - name: Apply New Hooks Patches
        if: ${{ inputs.VFS_patch_ENABLED == 'enable' }}
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/hooks/new_hooks.patch ./
          echo "正在打vfs补丁"
          patch -p1 -F 3 < new_hooks.patch
          echo "完成"

      - name: Add SUSFS Configuration Settings
        run: |
          cd kernel_workspace/kernel_platform
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig

          if [[ "${{ inputs.VFS_patch_ENABLED }}" == 'enable' ]]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          else
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig

          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Add make name
        run: |
          cd kernel_workspace/kernel_platform
          sed -i '$s|echo "\$res"|echo "\${{ inputs.KERNEL_NAME }}"|' ./common/scripts/setlocalversion
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
  
      - name: Build kernel
        if: inputs.CPU == 'sm8650' 
        run: |
          cd kernel_workspace
          ./kernel_platform/build_with_bazel.py -t ${{ inputs.CPUD }} gki
          
      - name: Fallback build kernel
        if: inputs.CPU != 'sm8650' 
        run: |
          cd kernel_workspace
          LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ inputs.CPUD }} gki
         
      - name: Make AnyKernel3
        run: |
          git clone https://github.com/Kernel-SU/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          cp kernel_workspace/kernel_platform/out/msm-kernel-${{ inputs.CPUD }}-gki/dist/Image ./AnyKernel3/
          cp kernel_workspace/kernel_platform/out/msm-kernel-${{ inputs.CPUD }}-gki/dist/Image ./kernel_workspace/kernel
         
      - name: Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_KernelSU_${{ env.KSUVER }}_${{ inputs.FEIL }}
          path: ./AnyKernel3/*

      - name: Upload Image
        uses: actions/upload-artifact@v4
        with:
          name: Image_KernelSU_${{ env.KSUVER }}_${{ inputs.FEIL }}
          path: kernel_workspace/kernel


          #发布
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 需要写入 Releases 的权限
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "build-${{ github.run_id }}"
          name: "Kernel Build ${{ github.run_number }}"
          body: |
            Auto-generated build from GitHub Actions
            - Date: ${{ github.event.repository.updated_at }}
            - Commit: ${{ github.sha }}
            - KSU Version: ${{ env.KSUVER }}
          draft: false
          prerelease: false
          files: |
            artifacts/AnyKernel3_KernelSU_*/Image
            artifacts/Image_KernelSU_*/Image

      - name: Clean old releases
        uses: dev-drprasad/delete-old-releases@v1
        with:
          keep_latest: ${{ env.RETENTION_COUNT }}
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ github.token }}
